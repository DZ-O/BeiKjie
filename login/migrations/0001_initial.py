# Generated by Django 3.2.12 on 2022-06-03 16:58

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserDetail',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('phone', models.IntegerField(help_text='手机号码', verbose_name='手机号码')),
                ('signature', models.CharField(default='神秘客？懒人？', help_text='个性签名', max_length=100, verbose_name='个性签名')),
                ('identity', models.CharField(help_text='官方身份', max_length=10, null=True, verbose_name='身份')),
                ('subscribe_count', models.IntegerField(default=0, help_text='关注人数', verbose_name='关注人数')),
                ('collect_count', models.IntegerField(default=0, help_text='收藏人数', verbose_name='收藏人数')),
                ('fans_count', models.IntegerField(default=0, help_text='粉丝人数', verbose_name='粉丝人数')),
                ('praise_count', models.IntegerField(default=0, help_text='获赞总数', verbose_name='获赞总数')),
                ('been_read_count', models.IntegerField(default=0, help_text='被阅读总数', verbose_name='被阅读总数')),
                ('SignIn', models.IntegerField(default=0, help_text='签到天数', verbose_name='签到天数')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Article',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='文章标题', max_length=20, verbose_name='文章标题')),
                ('introduction', models.CharField(default='', help_text='文章简介', max_length=100, verbose_name='文章简介')),
                ('article_content', models.TextField(help_text='文章内容', verbose_name='文章内容')),
                ('like_count', models.IntegerField(default=0, help_text='点赞数', verbose_name='点赞数')),
                ('dislike_count', models.IntegerField(default=0, help_text='点踩数', verbose_name='点踩数')),
                ('read_count', models.IntegerField(default=0, help_text='被观看次数', verbose_name='被观看次数')),
                ('create_time', models.DateTimeField(auto_now_add=True, help_text='创建时间', verbose_name='创建时间')),
                ('revise_time', models.DateTimeField(auto_now=True, help_text='修改时间', verbose_name='修改时间')),
            ],
        ),
        migrations.CreateModel(
            name='ArticleTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tag', models.CharField(help_text='文章标签', max_length=10, verbose_name='文章标签')),
            ],
        ),
        migrations.CreateModel(
            name='ArticleType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(help_text='文章分类', max_length=10, verbose_name='文章分类')),
            ],
        ),
        migrations.CreateModel(
            name='SubscriptionRelactionship',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subscribed', models.ForeignKey(help_text='关注的用户id', on_delete=django.db.models.deletion.CASCADE, related_name='UserDetail1', to='login.userdetail', verbose_name='关注的用户id')),
                ('user', models.ForeignKey(help_text='用户id', on_delete=django.db.models.deletion.CASCADE, to='login.userdetail', verbose_name='用户id')),
            ],
        ),
        migrations.CreateModel(
            name='Comments',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment_content', models.TextField(help_text='评论内容', verbose_name='评论内容')),
                ('comment_like_count', models.IntegerField(default=0, help_text='评论点赞数 ', verbose_name='评论点赞数')),
                ('comment_dislike_count', models.IntegerField(default=0, help_text='评论点踩数 ', verbose_name='评论点踩数')),
                ('comment_article', models.ForeignKey(help_text='评论的文章id', on_delete=django.db.models.deletion.CASCADE, to='login.article', verbose_name='评论的文章id')),
                ('comment_user', models.ForeignKey(help_text='评论者id', on_delete=django.db.models.deletion.CASCADE, to='login.userdetail', verbose_name='评论者id')),
                ('father_comment', models.ForeignKey(help_text='父评论id', on_delete=django.db.models.deletion.CASCADE, to='login.comments', verbose_name='父评论的id')),
            ],
        ),
        migrations.CreateModel(
            name='CollectRelactionship',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('article', models.ForeignKey(help_text='收藏文章id', on_delete=django.db.models.deletion.CASCADE, to='login.article', verbose_name='收藏文章id')),
                ('user', models.ForeignKey(help_text='收藏者id', on_delete=django.db.models.deletion.CASCADE, to='login.userdetail', verbose_name='收藏者id')),
            ],
        ),
        migrations.CreateModel(
            name='Article2ArticleTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('article', models.ForeignKey(help_text='文章id', on_delete=django.db.models.deletion.CASCADE, to='login.article', verbose_name='文章id')),
                ('article_tag', models.ForeignKey(help_text='文章标签id', on_delete=django.db.models.deletion.CASCADE, to='login.articletag', verbose_name='文章标签id')),
            ],
        ),
        migrations.AddField(
            model_name='article',
            name='article_tag',
            field=models.ManyToManyField(through='login.Article2ArticleTag', to='login.ArticleTag'),
        ),
        migrations.AddField(
            model_name='article',
            name='article_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='login.articletype'),
        ),
        migrations.AddField(
            model_name='article',
            name='auth',
            field=models.ForeignKey(help_text='作者id', on_delete=django.db.models.deletion.CASCADE, to='login.userdetail', verbose_name='作者id'),
        ),
        migrations.AddField(
            model_name='userdetail',
            name='collect_to',
            field=models.ManyToManyField(through='login.CollectRelactionship', to='login.Article'),
        ),
        migrations.AddField(
            model_name='userdetail',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='userdetail',
            name='subscribe_to',
            field=models.ManyToManyField(related_name='_login_userdetail_subscribe_to_+', through='login.SubscriptionRelactionship', to='login.UserDetail'),
        ),
        migrations.AddField(
            model_name='userdetail',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
